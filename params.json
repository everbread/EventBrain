{"name":"Eventbrain","body":"###################################################################\r\nEventBrain\r\n###################################################################\r\n\r\nEventBrain is a Python library to provide an easy configurable framework\r\nfor creating and configuring multiple nodes accross multiple servers(or cluster)\r\nthat perform simple tasks(a.k.a. actor) like parsing logs, checking system status,\r\napplying custom logic, and send some chunks of data to RabbitMQ (or other\r\nAMPQ-compatible queue management system), with the ability to attach \r\nmultiple listeners(a.k.a. decision) which apply some logic and redirect \r\nthe output to another actors, like notifyers, notification services or other.\r\nThe whole system relies on the exchanges and queues from AMPQ to define the \r\ndomains of application - i.e. if a decision listener waits for peak load of \r\naverage 90% for 5 min period - when it detects such event - it will fire a new\r\nevent to another exchange, and all actors, attached to that event will be \r\nresponsible to perform the needed notification or other actor. Each node(either \r\nactor or decision) can be started on one or more machines, with the only \r\nrequirement to have access to the main AMPQ.\r\n\r\n###################################################################\r\nInstall\r\n###################################################################\r\n\r\nInstall using:\r\n\r\n``python setup.py install``\r\n\r\n###################################################################\r\nRun\r\n###################################################################\r\n\r\nTo run an actor or decision(or any combination of objects),\r\nuse the launcher executable:\r\n\r\n``eventbrain/bin/launcher.py --help``\r\n\r\nUsage: launcher.py [options] start|stop|restart\r\n\r\nOptions:\r\n  -h, --help            show this help message and exit\r\n  -t TYPE, --type=TYPE  type of object to process('actor', 'a' or 'decision',\r\n                        'd')\r\n  -i ID, --id=ID        Id of the object to process\r\n  -p PID_DIR, --pid-dir=PID_DIR\r\n                        Directory to store pid files for daemonized objects.\r\n                        Default path is /var/run/eventbrain/\r\n  -l LOGFILE, --log-file=LOGFILE\r\n                        File to write logs. Default is /dev/null\r\n  -d, --daemonize       Start in daemon mode\r\n  -c CONFIG, --config=CONFIG\r\n                        Config file with initial settings. If a config file is\r\n                        provided, other parameters are ignored.\r\n\r\n  RabbitMQ options:\r\n    -s HOST, --server=HOST\r\n                        RabbitMQ server. Default is localhost\r\n    -u USER, --user=USER\r\n                        RabbitMQ credentials: username\r\n    -w PASSWORD, --password=PASSWORD\r\n                        RabbitMQ credentials: password\r\n\r\nTo start a single actor, use the following command:\r\n\r\n``eventbrain/bin/launcher.py --type=actor --id=CPU.CPU_usage --daemonize --pid-dir=/path/to/pid --log-file=/path/to/logs/some.log start``\r\n\r\nThe ``-d(--daemonize)`` option will start the actor in daemon mode, otherwise will be started in blocking mode.\r\n\r\nYou can see an example config file in ``eventbrain/bin/example.conf``. Using a config file gives you the\r\nability to start multiple actors/decisions on a single server.\r\n\r\nYou can describe each actor/decision in a single section, having the name of the module.class to be executed.\r\nAlong with default options like type, log_file, pid_dir, you can pass various parameters, which will be\r\npassed in the class constructor when initializing it.\r\n\r\n* Example config:\r\n    \\[Main]\r\n        host=10.0.0.1\r\n\r\n        user=queueuser\r\n\r\n        password=secret\r\n\r\n    \\[CPU.CPU_usage]\r\n        type=actor\r\n\r\n        log_file=/var/log/cpu_usage.log\r\n\r\n        pid_dir=/var/run/\r\n\r\n        interval=3\r\n\r\n        daemonize=true\r\n\r\n    \\[CPU.CPU_peak]\r\n        type=decision\r\n\r\n        log_file=/var/log/cpu_peak.log\r\n\r\n        pid_dir=/var/run/\r\n\r\n        interval=3\r\n\r\n        threshold=10\r\n\r\n        daemonize=true\r\n\r\n* Running launcher with a config file is simple:\r\n\r\n    ``eventbrain/bin/launcher.py --config=/path/to/config.conf start``\r\n","tagline":"EventBrain is a scalable framework for implementing cluster-wide monitoring and logging system, based on a queue management software like RabbitMQ, Redis, ZeroMQ etc.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}